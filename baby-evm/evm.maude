fmod STACK is
    protecting NAT .
    sort Stack .
    subsorts Nat < Stack .
    op mt  :           -> Stack [ctor] .
    op _;_ : Nat Stack -> Stack [ctor] .
endfm

fmod OPCODE is
    protecting NAT .
    sort OpCode .
    op PUSH : Nat -> OpCode [ctor] . 
    op ADD  :     -> OpCode [ctor] . 
    op SUB  :     -> OpCode [ctor] . 
    
    vars M N : Nat .

    op #sub(_, _) : Nat Nat -> Nat .
    eq #sub(s N, s M) = #sub(N, M) .
    eq #sub(N, 0) = N .

    sort OpCodes MapItem .
    subsorts MapItem < OpCodes .
    op nil     : -> OpCodes .
    op _ -> _  : Nat OpCode      -> MapItem [ctor] .     
    op _ , _   : OpCodes OpCodes -> OpCodes [ctor assoc comm id: nil ] .

endfm

fmod VM-STATE is
    protecting STACK .
    protecting OPCODE .
    sort Program .
    op ( stack _ |  program _ | pc  _ | gas _ )  : Stack OpCodes Nat Nat -> Program [ctor] . 

    vars M N PC GAS : Nat .
    vars S      : Stack .
    vars OPS    : OpCodes .

    eq ( stack S       | program (PC -> PUSH(M)) , OPS | pc   PC | gas (s GAS) )
     = ( stack (M ; S) | program (PC -> PUSH(M)) , OPS | pc s PC | gas GAS     ) .

    eq ( stack (M ; N ; S)   | program (PC -> ADD) , OPS | pc   PC | gas (s GAS) )
     = ( stack ((M + N) ; S) | program (PC -> ADD) , OPS | pc s PC | gas GAS     ) .

    eq ( stack (M ; N ; S)      | program (PC -> SUB) , OPS | pc   PC | gas (s GAS) )
     = ( stack (#sub(M, N) ; S) | program (PC -> SUB) , OPS | pc s PC | gas GAS     ) .
endfm
